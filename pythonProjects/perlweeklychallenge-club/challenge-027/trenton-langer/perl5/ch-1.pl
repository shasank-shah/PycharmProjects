#!/mu/bin/perl -w
use strict;
no warnings;



##################################################################################################################################################################
##################################################################################################################################################################
## Authorship
##################################################################################################################################################################
##################################################################################################################################################################
### Project
############# Perl Weekly Challenge - 027
### Name
############# c027_t1.pl
### Author
############# Trenton Langer
### Creation Date
############# 20190922
### Description
############# Intersection of lines from points 



#####################################################################################################################
#####################################################################################################################
## PWC - 027 - Task 1
#####################################################################################################################
#####################################################################################################################
#Write a script to find the intersection of two straight lines. 
#
#The co-ordinates of the two lines should be provided as command line parameter. For example:
#    The two ends of Line 1 are represented as co-ordinates (a,b) and (c,d).
#    The two ends of Line 2 are represented as co-ordinates (p,q) and (r,s).
#
#The script should print the co-ordinates of point of intersection of the above two lines.



#####################################################################################################################
#####################################################################################################################
## Solution
#####################################################################################################################
#####################################################################################################################
my ($a, $b, $c, $d) = (0,   0,  10, 10); #x1,y1  ,  x2,y2
my ($p, $q, $r, $s) = (0,   10, 10, 0);  #x1,y1  ,  x2,y2
($a, $b, $c, $d, $p, $q, $r, $s) = @ARGV if(scalar @ARGV == 8); # CMD Line override if given all 8

print "Line1:\t($a, $b) to \t($c, $d)\n";
print "Line2:\t($p, $q) to \t($r, $s)\n";

my ($int_x, $int_y) = @{intersection($a, $b, $c, $d, $p, $q, $r, $s)};
print defined($int_x) ? "Intersection:\t($int_x, $int_y)\n" : "Lines are Parallel\n";



#####################################################################################################################
#####################################################################################################################
## Subs
#####################################################################################################################
#####################################################################################################################
sub intersection()
{
    my ($line1x1,$line1y1,$line1x2,$line1y2,$line2x1,$line2y1,$line2x2,$line2y2) = @_;
    
    # Equations - ax + by = c (Standard Form)
    my $line1a = $line1y2 - $line1y1;
    my $line1b = $line1x1 - $line1x2;
    my $line1c = $line1a*($line1x1) + $line1b*($line1y1);
    #($line1a,$line1b,$line1c) = (-1*$line1a,-1*$line1b,-1*$line1c) if($line1a < 0);
    
    my $line2a = $line2y2 - $line2y1;
    my $line2b = $line2x1 - $line2x2;
    my $line2c = $line2a*($line2x1) + $line2b*($line2y1);
    #($line2a,$line2b,$line2c) = (-1*$line2a,-1*$line2b,-1*$line2c) if($line2a < 0);
    
    # Solve System 
    ##### a1x + b1y = c1 && a2x + b2y = c2
    ##### Reduce out y terms (mutliply by b1/b2) and subtract equations
    ##### (a1b2 - a2b1)x = b2c1 - b1c2
    my $x_factor = $line1a*$line2b - $line2a*$line1b;
    return [undef, undef] if($x_factor == 0); # Lines do not intersect
    
    my $x = ($line2b*$line1c - $line1b*$line2c)/$x_factor;
    my $y = ($line1a*$line2c - $line2a*$line1c)/$x_factor;
    return [$x, $y];
}




