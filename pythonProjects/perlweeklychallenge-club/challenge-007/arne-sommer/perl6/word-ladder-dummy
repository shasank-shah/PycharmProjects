#! /usr/bin/env perl6

multi sub MAIN ($first, $second, *@wordlist)
{
  say-output(find_shortest_ladder($first, $second, @wordlist));
}

multi sub MAIN ($first, $second, $dictionary where $dictionary.IO && $dictionary.IO.r)
{
  return unless $first.chars == $second.chars;
  
  my @wordlist = load-dictionary($dictionary, $first.chars);
    # Only load the words with the correct length.

  say-output(find_shortest_ladder($first, $second, @wordlist));
  
  sub load-dictionary ($file where $file.IO && $file.IO.r, $word-length)
  {
    return $file.IO.lines.grep({ .chars == $word-length });
  }
}

sub say-output(@list)
{
  for (@list) -> $curr
  {
    say $curr;
  }
}

sub find_shortest_ladder ($word1, $word2, @wordlist)
{
  return ("W1: $word1", "W2: $word2", "D: @wordlist[]");
}
