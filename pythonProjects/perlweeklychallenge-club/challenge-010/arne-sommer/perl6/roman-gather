#! /usr/bin/env perl6

multi MAIN (Int $number where $number > 0)
{
  say to-roman($number);
}
 
multi MAIN (Str $roman)
{
  say from-roman($roman);
}

sub to-roman (Int $number is copy)
{
  my $string = "";
  
  while $number >= 1000 { $string ~= "M";  $number -= 1000; }
  if $number >= 900     { $string ~= "CM"; $number -= 900; }
  if $number >= 500     { $string ~= "D";  $number -= 500; }
  if $number >= 400     { $string ~= "CD"; $number -= 400; }
  while $number >= 100  { $string ~= "C";  $number -= 100; }
  if $number >= 90      { $string ~= "XC"; $number -= 90; }
  if $number >= 50      { $string ~= "L";  $number -= 50; }
  if $number >= 40      { $string ~= "XL"; $number -= 40; }
  while $number >= 10   { $string ~= "X";  $number -= 10; }
  if $number >= 9       { $string ~= "IX"; $number -= 9; }
  if $number >= 5       { $string ~= "V";  $number -= 5; }
  if $number >= 4       { $string ~= "IV"; $number -= 4; }
  while $number >= 1    { $string ~= "I";  $number -= 1; }

  return $string;
}

my %value = ( I => 1, V => 5, X => 10, L => 50, C => 100, D => 500, M => 1000);

my Set $valid-roman = %value.keys.Set;

sub from-roman (Str $roman)
{
  my @digits = $roman.comb;

  die "Non-Roman digit $_ detected." unless $valid-roman{$_} for @digits;

  my $numbers := gather
  {
    while @digits
    {
      my $current = @digits.shift;
      if @digits.elems
      {
        if %value{@digits[0]} > %value{$current}
        {
          take %value{@digits.shift} - %value{$current};
	  next;
        }
      }
      take %value{$current};
    }
  }
  return $numbers.sum;
}